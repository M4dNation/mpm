# .functions.cfg
#
# This file needs to be sources from another script in order to be used as a
# configuration file.
# ie source .functions.cfg
#
# This file provides all functions and utilies of mpm.
#
#################################################################################

# Utilities
#################################################################################

##
# confirm
# This function is used in order to get a confirmation from a user.
##
confirm()
{
	read RESPONSE 
	if [[ "$RESPONSE" =~ ^[Yy][Ee][Ss]$ ]] 
	then
		return 0
	else
		return 1
	fi
}

##
# isFalse
# This function is used in order to know if parameter's value is "false" (case insensitive).
##
isFalse()
{
	if [[ "$1" =~ ^[Ff][Aa][Ll][Ss][Ee]$ ]]
	then
		return 0
	else
		return 1
	fi
}

##
# isTrue
# This function is used in order to know if parameter's value is "true" (case insensitive).
##
isTrue()
{
	if [[ "$1" =~ ^[Tt][Rr][Uu][Ee]$ ]]
	then
		return 0
	else
		return 1
	fi
}

# Functions
#################################################################################

##
# create
# This function is used in order to create a new meteor project or package
##
create()
{
	if [ -d .meteor ]
	then
		echo -e "$COLOR_FAILURE"
		echo "This directory is already a meteor project."
		echo -e "$COLOR_NORMAL"
	else
		echo -e "$COLOR_INFO"
		echo "Would you like to create a new meteor project ?"
		echo -e "$COLOR_NORMAL"
		if confirm
		then
			echo -e "$COLOR_INFO"
			echo "Please, enter project name ?"
			echo -e "$COLOR_NORMAL"
			read NAME
			meteor create $NAME
		else
			echo -e "$COLOR_INFO"
			echo "Would you like to create a new meteor package ?"
			echo -e "$COLOR_NORMAL"
			if confirm
			then
				echo -e "$COLOR_INFO"
				echo "Please, enter package name ?"
				echo -e "$COLOR_NORMAL"
				read name
				meteor create --package $NAME
			fi
		fi
	fi
}

##
# run
# This function is used in order to run meteor project
##
run()
{
	if [ -d .meteor ]
	then
		OPTIONS=""
		if isTrue $PRODUCTION_MODE
		then
			OPTIONS="$OPTIONS --production"
		fi
		if isTrue $RUN_ON_TARGET
		then
			OPTIONS="$OPTIONS $RUN_TARGET"
		fi
		if isTrue $USE_CONFIG
		then
			OPTIONS="$OPTIONS --settings $CONFIG_PATH"
		fi
		if isTrue $RUN_VERBOSE
		then
			OPTIONS="$OPTIONS --verbose"
		fi
		if isTrue $DEBUG_MODE
		then
			OPTIONS="$OPTIONS --debug-port $METEOR_DEBUG_PORT"
		fi
		if isTrue $UPDATE_ON_RUN
		then
			update
		fi
		if isTrue $RESET_ON_RUN
		then
			reset
		fi
		meteor run --port $METEOR_PORT $OPTIONS
	else
		
		echo -e "$COLOR_FAILURE"
		echo "This directory is not a meteor project."
		echo -e "$COLOR_NORMAL"
	fi
}

##
# reset
# This function is used in order to reset local data of a meteor project
##
reset()
{
	if [ -d .meteor ]
	then
		echo -e "$COLOR_INFO"
		echo -e "You are about to reset all local data of your meteor project, are you sure ? $COLOR_NORMAL"
		if confirm
		then
			meteor reset
		else
			return 0;
		fi
	else
		echo -e "$COLOR_FAILURE"
		echo "This directory is not a meteor project."
		echo -e "$COLOR_NORMAL"
	fi
}

##
# update
# This function is used in order to update meteor project or package
##
update()
{
	if [ -d .meteor ]
	then
		OPTIONS=""
		if isTrue $UPDATE_ONLY_PACKAGE
		then
			OPTIONS="$OPTIONS --packages-only"
		fi
		if isTrue $PATCH_MODE
		then
			OPTIONS="$OPTIONS --patch"
		fi
		if isTrue $UPDATE_ALL
		then
			meteor update $OPTIONS
		else
			FILENAME="FILENAME"
			while [ "$FILENAME" != "" ];
			do
				echo -e "$COLOR_INFO"
				echo -e "Please, enter package name (no name to stop): $COLOR_NORMAL"
				read FILENAME
				if [ "$FILENAME" != "" ]
				then
					meteor update $OPTIONS $FILENAME
				fi
			done
		fi
	else
		echo -e "$COLOR_FAILURE"
		echo "This directory is not a meteor project."
		echo -e "$COLOR_NORMAL"
	fi
}

##
# list
# This function is used in order to list added meteor package
##
list()
{
	if [ -d .meteor ]
	then
		echo -e "$COLOR_INFO"
		echo -e "Displaying package list"
		echo -e "----------------------------------"
		meteor list
	else
		echo -e "$COLOR_FAILURE"
		echo "This directory is not a meteor project."
		echo -e "$COLOR_NORMAL"
	fi

}

##
# login
# This function is used in order to login into meteor
##
login()
{
	if [ -d .meteor ]
	then
		OPTIONS=""
		if isTrue $LOG_WITH_EMAIL
		then
			OPTIONS="$OPTIONS --email"
		fi
		meteor login $OPTIONS
	else
		echo -e "$COLOR_FAILURE"
		echo "This directory is not a meteor project."
		echo -e "$COLOR_NORMAL"
	fi

}

##
# logout
# This function is used in order to logout from meteor
##
logout()
{
	if [ -d .meteor ]
	then
		meteor logout
	else
		echo -e "$COLOR_FAILURE"
		echo "This directory is not a meteor project."
		echo -e "$COLOR_NORMAL"
	fi
}

##
# package
# This function is used in order to handle package management in a meteor project
##
package()
{
	if [ -d .meteor ]
	then
		echo -e "$COLOR_INFO"
		echo -e "Would you like to create a new package ? $COLOR_NORMAL"
		if confirm
		then
			echo -e "$COLOR_INFO"
			echo -e "Please, enter package name: $COLOR_NORMAL"
			read PACKAGE
			echo -e "$COLOR_INFO"
			echo -e "Use configured prefix ? $COLOR_NORMAL"
			if confirm
			then
				meteor create --package "$PREFIX$PACKAGE"
			else
				meteor create --package $PACKAGE
			fi
		else
			echo -e "$COLOR_INFO"
			echo -e "Would you like to add an existing package ? $COLOR_NORMAL"
			if confirm
			then
				echo -e "$COLOR_INFO"
				echo -e "Please, enter package name: $COLOR_NORMAL"
				read PACKAGE
				echo -e "$COLOR_INFO"
				echo -e "Use configured prefix ? $COLOR_NORMAL"
				if confirm
				then
					meteor add "$PREFIX$PACKAGE"
				else
					meteor add $PACKAGE
				fi
			else
				echo -e "$COLOR_INFO"
				echo -e "Would you like to remove an existing package ? $COLOR_NORMAL"
				if confirm
				then
					echo -e "$COLOR_INFO"
					echo -e "Please, enter package name: $COLOR_NORMAL"
					read PACKAGE
					echo -e "$COLOR_INFO"
					echo -e "Use configured prefix ? $COLOR_NORMAL"
					if confirm
					then
						meteor remove "$PREFIX$PACKAGE"
					else
						meteor remove $PACKAGE
					fi
					if isTrue $DELETE_ON_REMOVE
					then
						rm -R packages/$PACKAGE
					fi
				fi
			fi
		fi
	else
		echo -e "$COLOR_FAILURE"
		echo "This directory is not a meteor project."
		echo -e "$COLOR_NORMAL"
	fi
}

##
# platform
# This function is used in order to handle platform management in a meteor project
##
platform()
{
	if [ -d .meteor ]
	then
		echo -e "$COLOR_INFO"
		echo -e "Would you like to add a new platform ? $COLOR_NORMAL"
		if confirm
		then
			echo -e "$COLOR_INFO"
			echo -e "Please, enter platform name: $COLOR_NORMAL"
			read PLATFORM
			meteor add-platform $PLATFORM
		else
			echo -e "$COLOR_INFO"
			echo -e "Would you like to remove an existing platform ? $COLOR_NORMAL"
			if confirm
			then
				echo -e "$COLOR_INFO"
				echo -e "Please, enter platform name: $COLOR_NORMAL"
				read PLATFORM
				meteor remove-platform $PLATFORM
			fi
		fi
	else
		echo -e "$COLOR_FAILURE"
		echo "This directory is not a meteor project."
		echo -e "$COLOR_NORMAL"
	fi
}